server.port=8080
server.servlet.context-path=/
######## tomcat访问日志 start ########
# 可以通过-D注入该参数, 但是-D参数需要放在jar之前, 还可以通过--server.tomcat.basedir=/xxx的方式动态注入
# server.tomcat.basedir=~/app/foobar
server.tomcat.accesslog.suffix=.log
server.tomcat.accesslog.prefix=access
server.tomcat.accesslog.file-date-format=.yyyy-MM-dd
server.tomcat.accesslog.enabled=true
server.tomcat.accesslog.pattern=%t %a "%r" %s %S (%D ms)
server.tomcat.accesslog.directory=logs
logging.level.org.apache.tomcat=info
logging.level.org.apache.catalina=info
######## tomcat访问日志 end   ########
######## tomcat连接设置 start ########
# 最大线程数, 默认200
# 最大线程数不是最大越好
# 第一种极端情况, 如果我们的操作是纯粹的计算, 那么系统响应时间的主要限制就是cpu的运算能力, 此时maxThreads应该尽量设的小, 降低同一时间内争抢cpu的线程个数, 可以提高计算效率, 提高系统的整体处理能力.
# 第二种极端情况, 如果我们的操作纯粹是IO或者数据库, 那么响应时间的主要限制就变为等待外部资源, 此时maxThreads应该尽量设的大, 这样才能提高同时处理请求的个数, 从而提高系统整体的处理能力.
server.tomcat.max-threads=1000
# 最大连接数
server.tomcat.max-connections=1000
# 初始化时的连接数量, 最小不活跃线程数
server.tomcat.min-SpareThreads=500
# 可以放到处理队列中的请求数, 默认100
server.tomcat.acceptCount=1000
# 建立连接超时时间, 10s
server.tomcat.connection-timeout=10000
######## tomcat连接设置 end   ########
# maven的profile与spring的profile结合
spring.application.name=@app.name@
spring.profiles.active=@profile.active@
# thymeleaf
spring.thymeleaf.prefix=classpath:/templates/
spring.thymeleaf.suffix=.html
spring.thymeleaf.mode=HTML
spring.thymeleaf.cache=false
spring.thymeleaf.encoding=UTF-8
spring.thymeleaf.check-template-location=true
# spring线程池配置, 拒绝策略为AbortPolicy, 抛出异常
spring.task.execution.pool.core-size=500
spring.task.execution.pool.max-size=1000
spring.task.execution.pool.keep-alive=5s
spring.task.execution.pool.queue-capacity=2000
# 线程名称前缀
spring.task.execution.thread-name-prefix=task-thread-
# 加载所有端点, 默认只加载info与health
management.endpoints.web.exposure.include=*
management.endpoint.health.show-details=always
# 可以关闭指定的端点
management.endpoint.shutdown.enabled=false
# boy配置
boy.name=foobar
boy.age=18
boy.password=foobar
boy.username=foobar
code=200